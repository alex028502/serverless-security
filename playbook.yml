---
- name: deploy to target or test directory
  hosts: all
  tasks:
    - name: copy package to target
#      copy: src=../package dest={{destination}}
      synchronize:
        src: package
        dest: "{{ security_camera_home }}"
        rsync_opts:
          - "--exclude=__pycache__"
          - "--exclude=*.pyc"
          - "--delete"
    - name: copy requirements to target
      copy: src=setup/requirements.txt dest={{ security_camera_home }}
    - pip:
        chdir: "{{ security_camera_home }}"
        requirements: requirements.txt
        virtualenv: venv
        virtualenv_command: python3 -m venv
    - name: remove old modules
      shell: venv/bin/pip freeze | cat - requirements.txt requirements.txt | sort | uniq -u | grep -v PyAC | grep -vw pkg-resources | xargs --no-run-if-empty venv/bin/pip uninstall -y
      args:
        chdir: "{{ security_camera_home }}"
    - name: generate .env
      template: src=setup/.env.j2 dest={{ security_camera_home }}/.env
    - name: generate security.service
      template: src=setup/security.service.j2 dest={{ security_camera_home }}/security.service
    - name: generate sensor.service
      template: src=setup/sensor.service.j2 dest={{ security_camera_home }}/sensor.service
    - name: Data directory if it does not exist
      file: path={{ security_camera_home }}/data state=directory

# This playbook mainly only includes stuff that needs to be done on every
# deployment and doesn't include anything that can't be tested by deploying to
# a local directory, so doesn't install any system dependencies. Not exactly
# how they intendend ansible to be used.

# Instead of putting the ansible stuff in a directory, it worked better to put
# the executable files in a directory, since ansible needs to know that the
# files exist, but they don't really need to know ansible exists. Also, the
# main thing this project does is install something on a raspberry pi, so this
# it made sense to make the ansible files "first class citizens"
